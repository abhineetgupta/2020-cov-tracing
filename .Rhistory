# Iterate over different tracing speeds
tracing_range <- seq(0,1,0.1)
speed_range1 <- c(5)
speed_range <- c(1:3)
#for(ii in trace_range){
foreach(jj = speed_range1) %dopar% {
for(pp in tracing_range){
for(kk in speed_range){
offspring_model(range_n = c(7),
trace_prop = pp, # Proportion of contacts traced
test_delay = jj, # Delay to test results that trigger tracing of contacts
trace_delay = kk, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.8, # Adherence of traced contacts to quarantine
n_run = n_run_pick,
dir_pick = paste0(out_dir,"runs_delay/out",jj,"_",pp,"_",kk))
}
}
}
file_names <- list.files(paste0(dir_pick,"runs_delay/"))
n_files <- length(file_names)
# Compile data
store_dat <- NULL
for(ii in 1:n_files){
input_ii <- read_csv(paste0(dir_pick,"runs_delay/",file_names[ii]))
store_dat <- rbind(store_dat,input_ii)
}
# Extract ranges
trace_range <- unique(store_dat$trace_p)
test_delay_range <- unique(store_dat$test_delay) %>% sort()
trace_delay_range <- unique(store_dat$trace_delay) %>% sort()
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Plot by WFH scenarios
col_def <- list("blue","orange","grey")
# label_list <- c("- Self-isolation and HH quarantine",
#                 "- - SI + HHQ + contact tracing")
label_list <- c("1d delay to trace","2d delay to trace","3d delay to trace")
par(mfrow=c(1,3),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
store_dat0 <- store_dat %>% arrange(trace_p)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Test delay: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(20,80),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
isolate_choose
speed_range
n_run_pick <- 1e2 # model iterations
tracing_range <- seq(0,1,0.2)
speed_range_test <- c(0,1,2,3,5)
speed_range_trace <- c(1:3)
t_asymp_range <- c(0.25,0.5,0.75)
p_test_range <- c(0.4,0.6,0.8)
isolate_choose <- c(0,0,0.25,0.25,0.25,0.25)
#for(ii in trace_range){
foreach(jj = speed_range_test) %dopar% {
for(pp in tracing_range){
for(kk in speed_range_trace){
for(mm in t_asymp_range){
for(tt in p_test_range){
offspring_model(range_n = c(7),
isolate_distn = isolate_choose, # onset to isolation
trace_prop = pp, # Proportion of contacts traced
test_delay = jj, # Delay to test results that trigger tracing of contacts
trace_delay = kk, # Delay to tracing
p_tested = tt, # Probability index case isolated/tested
trace_adherence = 1, # Adherence of traced contacts to quarantine (wrap into trace parameter)
prob_t_asymp = mm, # Asymptomatic contribution
n_run = n_run_pick,
dir_pick = paste0(out_dir,"runs_delay/out",jj,"_",pp,"_",kk,"_",mm,"_",p_tested))
}
}
}
}
}
tracing_range <- seq(0,1,0.2)
speed_range_test <- c(0,1,2,3,5)
speed_range_trace <- c(1:3)
t_asymp_range <- c(0.25,0.5,0.75)
p_test_range <- c(0.4,0.6,0.8)
isolate_choose <- c(0,0,0.25,0.25,0.25,0.25)
#for(ii in trace_range){
foreach(jj = speed_range_test) %dopar% {
for(pp in tracing_range){
for(kk in speed_range_trace){
for(mm in t_asymp_range){
for(tt in p_test_range){
offspring_model(range_n = c(7),
isolate_distn = isolate_choose, # onset to isolation
trace_prop = pp, # Proportion of contacts traced
test_delay = jj, # Delay to test results that trigger tracing of contacts
trace_delay = kk, # Delay to tracing
p_tested = tt, # Probability index case isolated/tested
trace_adherence = 1, # Adherence of traced contacts to quarantine (wrap into trace parameter)
prob_t_asymp = mm, # Asymptomatic contribution
n_run = n_run_pick,
dir_pick = paste0(out_dir,"runs_delay/out",jj,"_",pp,"_",kk,"_",mm,"_",tt))
}
}
}
}
}
dir_pick
file_names <- list.files(paste0(dir_pick,"runs_delay/"))
n_files <- length(file_names)
# Compile data
store_dat <- NULL
for(ii in 1:n_files){
input_ii <- read_csv(paste0(dir_pick,"runs_delay/",file_names[ii]))
store_dat <- rbind(store_dat,input_ii)
}
# Extract ranges
trace_range <- unique(store_dat$trace_p)
test_delay_range <- unique(store_dat$test_delay) %>% sort()
trace_delay_range <- unique(store_dat$trace_delay) %>% sort()
# Load model functions
source("R/model_functions.R")
tracing_range <- seq(0,1,0.2)
speed_range_test <- c(0,1,2,3,5)
speed_range_trace <- c(1:3)
t_asymp_range <- c(0.25,0.5,0.75)
p_test_range <- c(0.4,0.6,0.8)
isolate_choose <- c(0,0,0.25,0.25,0.25,0.25)
#for(ii in trace_range){
foreach(jj = speed_range_test) %dopar% {
for(pp in tracing_range){
for(kk in speed_range_trace){
for(mm in t_asymp_range){
for(tt in p_test_range){
offspring_model(range_n = c(7),
isolate_distn = isolate_choose, # onset to isolation
trace_prop = pp, # Proportion of contacts traced
test_delay = jj, # Delay to test results that trigger tracing of contacts
trace_delay = kk, # Delay to tracing
p_tested = tt, # Probability index case isolated/tested
trace_adherence = 1, # Adherence of traced contacts to quarantine (wrap into trace parameter)
prob_t_asymp = mm, # Asymptomatic contribution
n_run = n_run_pick,
dir_pick = paste0(out_dir,"runs_delay/out",jj,"_",pp,"_",kk,"_",mm,"_",tt))
}
}
}
}
}
file_names <- list.files(paste0(dir_pick,"runs_delay/"))
n_files <- length(file_names)
# Compile data
store_dat <- NULL
for(ii in 1:n_files){
input_ii <- read_csv(paste0(dir_pick,"runs_delay/",file_names[ii]))
store_dat <- rbind(store_dat,input_ii)
}
# Extract ranges
trace_range <- unique(store_dat$trace_p)
test_delay_range <- unique(store_dat$test_delay) %>% sort()
trace_delay_range <- unique(store_dat$trace_delay) %>% sort()
ptest_delay_range <- unique(store_dat$p_tested) %>% sort()
t_aymp_delay_range <- unique(store_dat$t_asymp_range) %>% sort()
# Extract ranges
trace_range <- unique(store_dat$trace_p)
test_delay_range <- unique(store_dat$test_delay) %>% sort()
trace_delay_range <- unique(store_dat$trace_delay) %>% sort()
ptest_delay_range <- unique(store_dat$p_tested) %>% sort()
t_aymp_delay_range <- unique(store_dat$prob_t_asymp) %>% sort()
t_aymp_delay_range
ptest_delay_range
# Loop over options
pp1=1
pp2=1
store_dat0 <- store_dat %>% filter(p_tested=ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,3),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(20,80),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=8,height=4)
dev.off()
pp1=1
pp2=1
store_dat0 <- store_dat %>% filter(p_tested=ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(20,80),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=8,height=4)
dev.off()
pp1=1
pp2=1
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(20,80),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=8,height=4)
dev.off()
pp1=1
pp2=1
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(0,100),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=8,height=4)
dev.off()
for(pp1 in 1:length(ptest_delay_range)){
for(pp2 in 1:length(t_aymp_delay_range)){
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(0,100),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=8,height=4)
dev.off()
}
}
for(pp1 in 1:length(ptest_delay_range)){
for(pp2 in 1:length(t_aymp_delay_range)){
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(0,100),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=15,height=4)
dev.off()
}
}
# - - -
# Loop over options
for(pp1 in 1:length(ptest_delay_range)){
for(pp2 in 1:length(t_aymp_delay_range)){
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(0,100),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=12,height=4)
dev.off()
}
}
n_run_pick <- 1e4 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
# - - - - - -
# MAIN FIGURES
# - - - - - -
# - - - - - -
# Baseline case (Table 3 and 4):
#offspring_model(n_run = n_run_pick, range_n = c(1:13), dir_pick = out_dir,output_r = T)
#table_outputs_1(dir_pick = out_dir)
# - - - - - -
# Baseline with reduced contacts
covid_s <- 0
offspring_model(n_run = n_run_pick,
wfh_prob = 0,
wfh_probC = 0,
other_prob = 0,
cc_risk = 0.06*(1-covid_s), # Outside HH contact risk
trace_prop = 0.9, # Proportion of contacts traced
pre_inf = 2, # Pre-infectious period
test_delay = 2, # Delay to tracing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.8, # Adherence of traced contacts to quarantine
range_n = c(1,2,3,7), dir_pick = out_dir,output_r = T)
# - - - - - -
# Iterate over different tracing speeds
tracing_range <- seq(0,1,0.2)
speed_range_test <- c(0,1,2,3,5)
speed_range_trace <- c(1:3)
t_asymp_range <- c(0.25,0.5,0.75)
p_test_range <- c(0.4,0.6,0.8)
isolate_choose <- c(0,0,0.25,0.25,0.25,0.25)
#for(ii in trace_range){
foreach(jj = speed_range_test) %dopar% {
for(pp in tracing_range){
for(kk in speed_range_trace){
for(mm in t_asymp_range){
for(tt in p_test_range){
offspring_model(range_n = c(7),
isolate_distn = isolate_choose, # onset to isolation
trace_prop = pp, # Proportion of contacts traced
test_delay = jj, # Delay to test results that trigger tracing of contacts
trace_delay = kk, # Delay to tracing
p_tested = tt, # Probability index case isolated/tested
trace_adherence = 1, # Adherence of traced contacts to quarantine (wrap into trace parameter)
prob_t_asymp = mm, # Asymptomatic contribution
n_run = n_run_pick,
dir_pick = paste0(out_dir,"runs_delay/out",jj,"_",pp,"_",kk,"_",mm,"_",tt))
}
}
}
}
}
file_names <- list.files(paste0(dir_pick,"runs_delay/"))
n_files <- length(file_names)
# Compile data
store_dat <- NULL
for(ii in 1:n_files){
input_ii <- read_csv(paste0(dir_pick,"runs_delay/",file_names[ii]))
store_dat <- rbind(store_dat,input_ii)
}
# Extract ranges
trace_range <- unique(store_dat$trace_p)
test_delay_range <- unique(store_dat$test_delay) %>% sort()
trace_delay_range <- unique(store_dat$trace_delay) %>% sort()
ptest_delay_range <- unique(store_dat$p_tested) %>% sort()
t_aymp_delay_range <- unique(store_dat$prob_t_asymp) %>% sort()
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Plot by scenarios
col_def <- list("blue","orange","grey")
label_list <- c("Delay test-to-trace: 1d",
"Delay test-to-trace: 2d",
"Delay test-to-trace: 3d")
# - - -
# Loop over options
for(pp1 in 1:length(ptest_delay_range)){
for(pp2 in 1:length(t_aymp_delay_range)){
store_dat0 <- store_dat %>% filter(p_tested==ptest_delay_range[pp1] & prob_t_asymp==t_aymp_delay_range[pp2]) %>% arrange(trace_p)
par(mfrow=c(1,5),mar=c(3,3,1,1),mgp=c(2,0.6,0),las=1)
for(ii in 1:length(test_delay_range)){
for(kk in 1:length(trace_delay_range)){
for(jj in 2){
if(jj==1){scenario_pick <- "hh_quaratine_only"}
if(jj==2){scenario_pick <- "isolation_manual_tracing"}
xx <- store_dat0 %>% filter(scenario==scenario_pick) %>% filter(test_delay==test_delay_range[ii] & trace_delay==trace_delay_range[kk])
if(jj==2 & kk==1){
plot(xx$wfh,xx$r_eff,xlab="% contacts traced and quarantined",
main = paste0("Delay isolation-to-test: ",test_delay_range[ii]," days"),
ylab="reduction in transmission (%)",ylim=c(0,100),xlim=c(0,1),col="white",type="l",lwd=2)
#lines(c(0.2,1),c(1,1),col="dark grey",lty=2)
grid(ny = NULL, nx=NA, col = "lightgray")
}
if(jj==2){
#text(x=0.2,y=100*(1-0.1*jj), labels=label_list[jj],cex=1,col="black",adj=0)
text(x=0.2,y=80*(1-0.05*kk), labels=label_list[kk],cex=1,col=col_def[[kk]],adj=0)
}
lines(xx$trace_p,100*xx$reduction_raw,col=col_def[[kk]],lwd=2,lty=1)
# if(jj==1){
#   text(x=0.8,0.5-0.1*ii,labels=paste0(round(40),"% school contacts"),col=col_def[[ii]],adj=0)
# }
} # end scenarios
} # end trace delay
} # end test delay
dev.copy(pdf,paste0(dir_pick,"Figure_delay_ptest_",pp1,"_tasymp",pp2,".pdf"),width=12,height=4)
dev.off()
}
}
